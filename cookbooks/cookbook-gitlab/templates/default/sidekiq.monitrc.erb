check process gitlab_sidekiq with pidfile <%= @sidekiq_pid_path %>
  <% if @notify_email%>
    alert <%= @notify_email %> not on { resource }
  <% end %>
  <% if @emergency_email %>
    alert <%= @emergency_email %> only on { <%= @emergency_events.join(' ') %> }
  <% end %>
  start program = "/bin/su - <%= @gitlab_user %> -c 'RAILS_ENV=production <%= @gitlab_path %>/script/background_jobs start'" with timeout <%= @start_timeout %> seconds
  stop program = "/bin/su - <%= @gitlab_user %> -c 'RAILS_ENV=production <%= @gitlab_path %>/script/background_jobs stop'" with timeout <%= @stop_timeout %> seconds
  # Assuming our server has two cores, 40% totalcpu means pinning 80% of a single core
  if totalcpu is greater than <%= @cpu_threshold %>% for <%= @cpu_cycles_number %> cycles then restart
  if totalmem is greater than <%= @mem_threshold %> MB for <%= @mem_cycles_number %> cycles then restart
  if <%= @restart_number %> restart within <%= @restart_cycles_number %> cycles then unmonitor
  group gitlab_sidekiq

check program sidekiq_load_ok with path "/usr/local/bin/sidekiq_load_ok"
  if status != 0 then exec "/usr/bin/monit restart gitlab_sidekiq"
